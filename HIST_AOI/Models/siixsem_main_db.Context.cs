//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HIST_AOI.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class siixsem_main_dbEntities : DbContext
    {
        public siixsem_main_dbEntities()
            : base("name=siixsem_main_dbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<getAOILines_Result> getAOILines()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAOILines_Result>("getAOILines");
        }
    
        public virtual ObjectResult<getAOILine_Result> getAOILine(string tOOL)
        {
            var tOOLParameter = tOOL != null ?
                new ObjectParameter("TOOL", tOOL) :
                new ObjectParameter("TOOL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAOILine_Result>("getAOILine", tOOLParameter);
        }
    
        public virtual ObjectResult<getAOILineByR_Result> getAOILineByR(string tOOL)
        {
            var tOOLParameter = tOOL != null ?
                new ObjectParameter("TOOL", tOOL) :
                new ObjectParameter("TOOL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAOILineByR_Result>("getAOILineByR", tOOLParameter);
        }
    
        public virtual ObjectResult<isPallet_Result> isPallet(string program)
        {
            var programParameter = program != null ?
                new ObjectParameter("program", program) :
                new ObjectParameter("program", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isPallet_Result>("isPallet", programParameter);
        }
    }
}
